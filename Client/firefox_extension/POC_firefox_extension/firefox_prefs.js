/**
 * Firefox Preferences for bsync
 *
 * This module generates Firefox profile preferences.
 * It combines a comprehensive set of preferences from OpenWPM for browser consistency
 * with dynamic settings required for bsync's operation (Proxy, AutoConfig).
 * It sets the browser language and region to US English to match OpenWPM's default.
 *
 * See OpenWPM's configuration for the source of many of these preferences:
 * OpenWPM-cloned/OpenWPM/openwpm/deploy_browsers/configure_firefox.py
 */

/**
 * Returns Firefox preferences as a string, including OpenWPM defaults.
 *
 * @param {Object} options - Configuration options.
 * @param {boolean} options.enableProxy - Whether to enable the proxy.
 * @param {string} options.proxyHost - Proxy host address.
 * @param {number} options.proxyPort - Proxy port number.
 * @param {boolean} options.enableAutoConfig - Whether to enable AutoConfig for extension autoload.
 * @returns {string} Firefox preferences as a string.
 */
function getDefaultPreferences(options = {}) {
  const prefs = [
    '// Generated by BSYNC - Combining OpenWPM prefs with custom settings',

    // --- Language and Region Settings (Matching OpenWPM) ---
    'user_pref("intl.accept_languages", "en-US, en");',
    'user_pref("general.useragent.locale", "en-US");',
    'user_pref("browser.search.region", "US");',
    'user_pref("browser.search.countryCode", "US");',

    // --- OpenWPM Base Preferences ---
    // Startup / Speed
    'user_pref("browser.shell.checkDefaultBrowser", false);',
    'user_pref("browser.slowStartup.notificationDisabled", true);',
    'user_pref("browser.slowStartup.maxSamples", 0);',
    'user_pref("browser.slowStartup.samples", 0);',
    'user_pref("extensions.checkCompatibility.nightly", false);',
    'user_pref("browser.rights.3.shown", true);',
    'user_pref("reader.parse-on-load.enabled", false);',
    'user_pref("browser.pagethumbnails.capturing_disabled", true);',
    'user_pref("browser.uitour.enabled", false);',
    'user_pref("dom.flyweb.enabled", false);',

    // Disable health reports / telemetry / crash reports
    'user_pref("datareporting.policy.dataSubmissionEnabled", false);',
    'user_pref("datareporting.healthreport.uploadEnabled", false);',
    'user_pref("datareporting.healthreport.service.enabled", false);',
    'user_pref("toolkit.telemetry.archive.enabled", false);',
    'user_pref("toolkit.telemetry.enabled", false);',
    'user_pref("toolkit.telemetry.unified", false);',
    'user_pref("breakpad.reportURL", "");',
    'user_pref("dom.ipc.plugins.reportCrashURL", false);',
    'user_pref("browser.selfsupport.url", "");',
    'user_pref("browser.tabs.crashReporting.sendReport", false);',
    'user_pref("browser.crashReports.unsubmittedCheck.enabled", false);',
    'user_pref("dom.ipc.plugins.flash.subprocess.crashreporter.enabled", false);',

    // Predictive Actions / Prefetch
    'user_pref("network.predictor.enabled", false);',
    'user_pref("network.dns.disablePrefetch", true);',
    'user_pref("network.prefetch-next", false);',
    'user_pref("browser.search.suggest.enabled", false);',
    'user_pref("network.http.speculative-parallel-limit", 0);',
    'user_pref("keyword.enabled", false);', // location bar using search
    'user_pref("browser.urlbar.userMadeSearchSuggestionsChoice", true);',
    'user_pref("browser.casting.enabled", false);',

    // Disable pinging Mozilla for geoip
    'user_pref("browser.search.geoip.url", "");',
    
    // Disable pinging Mozilla for geo-specific search
    'user_pref("browser.search.geoSpecificDefaults", false);',
    'user_pref("browser.search.geoSpecificDefaults.url", "");',

    // Disable auto-updating
    'user_pref("app.update.enabled", false);', // browser
    'user_pref("app.update.url", "");', // browser
    'user_pref("browser.search.update", false);', // search
    'user_pref("extensions.update.enabled", false);', // extensions
    'user_pref("extensions.update.autoUpdateDefault", false);',
    'user_pref("extensions.getAddons.cache.enabled", false);',
    'user_pref("lightweightThemes.update.enabled", false);', // Personas

    // Disable Safebrowsing and other security features
    'user_pref("browser.safebrowsing.phising.enabled", false);',
    'user_pref("browser.safebrowsing.malware.enabled", false);',
    'user_pref("browser.safebrowsing.downloads.enabled", false);',
    'user_pref("browser.safebrowsing.downloads.remote.enabled", false);',
    'user_pref("browser.safebrowsing.blockedURIs.enabled", false);',
    'user_pref("browser.safebrowsing.provider.mozilla.gethashURL", "");',
    'user_pref("browser.safebrowsing.provider.google.gethashURL", "");',
    'user_pref("browser.safebrowsing.provider.google4.gethashURL", "");',
    'user_pref("browser.safebrowsing.provider.mozilla.updateURL", "");',
    'user_pref("browser.safebrowsing.provider.google.updateURL", "");',
    'user_pref("browser.safebrowsing.provider.google4.updateURL", "");',
    'user_pref("browser.safebrowsing.provider.mozilla.lists", "");', // TP
    'user_pref("browser.safebrowsing.provider.google.lists", "");', // TP
    'user_pref("browser.safebrowsing.provider.google4.lists", "");', // TP
    'user_pref("extensions.blocklist.enabled", false);', // extensions
    'user_pref("security.OCSP.enabled", 0);',

    // Disable Content Decryption Module and OpenH264 related downloads
    'user_pref("media.gmp-manager.url", "");',
    'user_pref("media.gmp-provider.enabled", false);',
    'user_pref("media.gmp-widevinecdm.enabled", false);',
    'user_pref("media.gmp-widevinecdm.visible", false);',
    'user_pref("media.gmp-gmpopenh264.enabled", false);',

    // Disable Experiments
    'user_pref("experiments.enabled", false);',
    'user_pref("experiments.manifest.uri", "");',
    'user_pref("experiments.supported", false);',
    'user_pref("experiments.activeExperiment", false);',
    'user_pref("network.allow-experiments", false);',

    // Disable pinging Mozilla for newtab
    'user_pref("browser.newtabpage.directory.ping", "");',
    'user_pref("browser.newtabpage.directory.source", "data:text/plain,{}");',
    'user_pref("browser.newtabpage.enabled", false);',
    'user_pref("browser.newtabpage.enhanced", false);',
    'user_pref("browser.newtabpage.introShown", true);',
    'user_pref("browser.aboutHomeSnippets.updateUrl", "data:text/plain,{}");',

    // Disable Pocket
    'user_pref("extensions.pocket.enabled", false);',

    // Disable Shield
    'user_pref("app.shield.optoutstudies.enabled", false);',
    'user_pref("extensions.shield-recipe-client.enabled", false);',

    // Disable Source Pragmas
    'user_pref("javascript.options.source_pragmas", false);',

    // Enable extensions and disable extension signing
    'user_pref("extensions.experiments.enabled", true);',
    'user_pref("xpinstall.signatures.required", false);',
    'user_pref("extensions.install.requireBuiltInCerts", false);',
    'user_pref("extensions.autoDisableScopes", 0);',
    'user_pref("extensions.webextensions.remote", false);',
    'user_pref("extensions.langpacks.signatures.required", false);',

    // Additional settings from original file
    'user_pref("browser.startup.homepage", "about:blank");',
    'user_pref("browser.startup.page", 0);',
    'user_pref("browser.tabs.warnOnClose", false);',
    'user_pref("browser.tabs.warnOnOpen", false);',
    'user_pref("browser.sessionstore.resume_from_crash", false);',
    'user_pref("browser.aboutConfig.showWarning", false);',
    'user_pref("ui.systemUsesDarkTheme", 0);', // Disable dark mode
    'user_pref("browser.translations.automaticallyPopup", false);',
  ];

  // --- Dynamic bsync settings ---

  // Add AutoConfig settings for extension autoload if enabled
  if (options.enableAutoConfig) {
    prefs.push(
      '// --- AutoConfig settings for automatic extension loading ---',
      // Disable the sandbox to enable running unsafe code
      'user_pref("general.config.sandboxLevel", 0);',
      'user_pref("general.config.sandbox_enabled", false);',
      // The file named in the following line must be in [Firefox program folder]
      'user_pref("general.config.filename", "userChrome.js");',
      'user_pref("general.config.obscure_value", 0);'
    );
  }

  // Add proxy settings if needed
  if (options.enableProxy && options.proxyHost && options.proxyPort) {
    prefs.push(
      '// --- Proxy Settings ---',
      'user_pref("network.proxy.type", 1);', // Manual proxy configuration
      `user_pref("network.proxy.http", "${options.proxyHost}");`,
      `user_pref("network.proxy.http_port", ${options.proxyPort});`,
      `user_pref("network.proxy.ssl", "${options.proxyHost}");`,
      `user_pref("network.proxy.ssl_port", ${options.proxyPort});`,
      `user_pref("network.proxy.ftp", "${options.proxyHost}");`,
      `user_pref("network.proxy.ftp_port", ${options.proxyPort});`,
      `user_pref("network.proxy.socks", "${options.proxyHost}");`,
      `user_pref("network.proxy.socks_port", ${options.proxyPort});`,
      'user_pref("network.proxy.share_proxy_settings", true);', // Use the same proxy for all protocols
      'user_pref("network.proxy.no_proxies_on", "localhost, 127.0.0.1");'
    );
  }

  return "// Mozilla User Preferences\n" + prefs.join("\n");
}

module.exports = {
  getDefaultPreferences
};
